import json
import time
import re
import os
from typing import Dict, List, Tuple
from openai import OpenAI
from gtts import gTTS
import pygame
from io import BytesIO
import vosk
import sounddevice as sd
import queue
import numpy as np
from datetime import datetime

class AdvancedVoiceInterviewSystem:
    def __init__(self, resume_data: Dict):
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.client = OpenAI(base_url="http://localhost:1234/v1", api_key="lm-studio")
        # –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—É –∂–µ –º–æ–¥–µ–ª—å, –Ω–æ –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–¥–µ–ª–µ–Ω–∞)
        self.evaluation_client = OpenAI(base_url="http://localhost:1234/v1", api_key="lm-studio")
        
        self.generation_model = "meta-llama-3-8b-instruct"  # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤
        self.evaluation_model = "qwen2-vl-7b-instruct"      # –î–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
        
        self.resume_data = resume_data
        pygame.mixer.init()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Vosk
        self.setup_voice_recognition()
        
        self.interview_questions = []
        self.ideal_answers = {}
        self.candidate_answers = []
        self.scores = []
        self.current_question_index = 0
        self.is_generating_next = False
        self.silence_timeout = 4.0  # –£–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 2 —Å–µ–∫—É–Ω–¥ –¥–ª—è –±–æ–ª–µ–µ –±—ã—Å—Ç—Ä–æ–π —Ä–µ–∞–∫—Ü–∏–∏
        self.silence_threshold = 0.01  # –ü–æ—Ä–æ–≥ —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞ –¥–ª—è –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–∏—à–∏–Ω—ã
        
        # –ü–∞–º—è—Ç—å –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        self.dialog_memory = []
        self.conversation_history = []
        self.follow_up_questions = []
        self.candidate_introduction = ""  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–∞—Å—Å–∫–∞–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ —Å–µ–±–µ

    def setup_voice_recognition(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ Vosk —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        try:
            model_path = "vosk-model-small-ru-0.22"
            if not os.path.exists(model_path):
                model_path = "vosk-model-ru"
            
            self.vosk_model = vosk.Model(model_path)
            self.sample_rate = 16000
            self.audio_queue = queue.Queue()
            self.recognition_active = False
            print("‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Vosk: {e}")
            self.vosk_model = None

    def listen_to_speech_with_silence_detection(self, timeout: int = 120) -> Tuple[str, float]:
        """
        –°–ª—É—à–∞–µ—Ç —Ä–µ—á—å —Å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Ç–∏—à–∏–Ω—ã
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞)
        """
        if not self.vosk_model:
            return self.fallback_listen(), 0.0
            
        print("üé§ –ú–æ–∂–µ—Ç–µ –≥–æ–≤–æ—Ä–∏—Ç—å")
        
        try:
            rec = vosk.KaldiRecognizer(self.vosk_model, self.sample_rate)
            full_text = ""
            last_speech_time = time.time()
            start_time = time.time()
            speech_detected = False
            
            def audio_callback(indata, frames, time_info, status):
                if status:
                    print(status)
                
                # –î–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏—à–∏–Ω—ã
                audio_data = bytes(indata)
                audio_level = np.sqrt(np.mean(np.frombuffer(audio_data, dtype=np.int16)**2))
                
                if audio_level > self.silence_threshold * 32768:  # 32768 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è int16
                    nonlocal last_speech_time
                    last_speech_time = time.time()
                    nonlocal speech_detected
                    speech_detected = True
                
                self.audio_queue.put((audio_data, time.time()))
            
            with sd.RawInputStream(
                samplerate=self.sample_rate,
                blocksize=8000,
                dtype='int16',
                channels=1,
                callback=audio_callback
            ):
                self.recognition_active = True
                
                while time.time() - start_time < timeout and self.recognition_active:
                    try:
                        data, timestamp = self.audio_queue.get(timeout=0.5)
                        
                        if rec.AcceptWaveform(data):
                            result = json.loads(rec.Result())
                            if result.get('text'):
                                full_text += " " + result['text']
                                print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {result['text']}")
                                speech_detected = True
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—à–∏–Ω—É - —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–∂–µ –±—ã–ª–∞ —Ä–µ—á—å
                        if speech_detected and time.time() - last_speech_time > self.silence_timeout:
                            print("‚è∏Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å...")
                            break
                            
                    except queue.Empty:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏—à–∏–Ω—É –≤ —Å–ª—É—á–∞–µ –ø—É—Å—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
                        if speech_detected and time.time() - last_speech_time > self.silence_timeout:
                            print("‚è∏Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø–∞—É–∑–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–ø–∏—Å—å...")
                            break
                        continue
                
                # –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                final_result = json.loads(rec.FinalResult())
                if final_result.get('text'):
                    full_text += " " + final_result['text']
                
            duration = time.time() - start_time
            return full_text.strip() if full_text.strip() else "–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª", duration
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return self.fallback_listen(), 0.0
        finally:
            self.recognition_active = False

    def fallback_listen(self) -> str:
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç"""
        print("üé§ –î–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Vosk. –°–µ–π—á–∞—Å –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.")
        try:
            return input("üí¨ –í–∞—à –æ—Ç–≤–µ—Ç (—Ç–µ–∫—Å—Ç): ")
        except:
            return "–ö–∞–Ω–¥–∏–¥–∞—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª"

    def stop_listening(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ"""
        self.recognition_active = False

    def evaluate_answer_and_decide(self, question: str, candidate_answer: str, ideal_answer: str) -> Tuple[float, str, bool]:
        """
        –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ä–µ—à–µ–Ω–∏–µ: –∑–∞–¥–∞–≤–∞—Ç—å –¥–æ–ø. –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –¥–∞–ª—å—à–µ
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (–æ—Ü–µ–Ω–∫–∞, —Ñ–∏–¥–±–µ–∫, –Ω—É–∂–Ω–æ_–ª–∏_—É–≥–ª—É–±–ª—è—Ç—å—Å—è)
        """
        evaluation_prompt = f"""
        –¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –æ—Ü–µ–Ω–∫–µ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è—Ö. –û—Ü–µ–Ω–∏ –æ—Ç–≤–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –∏ –ø—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ:
        –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–¥–∞–≤–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ –∏–ª–∏ –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–ª–µ–¥—É—é—â–µ–π.
        
        –í–û–ü–†–û–°: {question}
        
        –û–¢–í–ï–¢ –ö–ê–ù–î–ò–î–ê–¢–ê: {candidate_answer}
        
        –ò–î–ï–ê–õ–¨–ù–´–ô –û–¢–í–ï–¢: {ideal_answer}
        
        –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º:
        1. –ü–æ–ª–Ω–æ—Ç–∞ –∏ –≥–ª—É–±–∏–Ω–∞ –æ—Ç–≤–µ—Ç–∞
        2. –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ—Ä–æ–≤
        3. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –≤–æ–ø—Ä–æ—Å—É
        4. –Ø—Å–Ω–æ—Å—Ç—å –∏–∑–ª–æ–∂–µ–Ω–∏—è
        
        –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π, –Ω–µ–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–ª–∏ —Ç—Ä–µ–±—É–µ—Ç —É—Ç–æ—á–Ω–µ–Ω–∏—è - –≤–µ—Ä–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ —É–≥–ª—É–±–∏—Ç—å—Å—è.
        –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø–æ–ª–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏ –∏—Å—á–µ—Ä–ø—ã–≤–∞—é—â–∏–π - –≤–µ—Ä–Ω–∏ —Ä–µ—à–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ.
        
        –í–µ—Ä–Ω–∏ –æ—Ç–≤–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
        {{
            "score": —á–∏—Å–ª–æ –æ—Ç 1.0 –¥–æ 5.0,
            "feedback": "–∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—ã–π —Ñ–∏–¥–±–µ–∫ –Ω–∞ —Ä—É—Å—Å–∫–æ–º",
            "need_follow_up": true/false (–Ω—É–∂–µ–Ω –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å),
            "reason": "–ø—Ä–∏—á–∏–Ω–∞ —Ä–µ—à–µ–Ω–∏—è"
        }}
        """
        
        try:
            print("ü§ñ –û—Ü–µ–Ω–∏–≤–∞—é –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞—é —Ä–µ—à–µ–Ω–∏–µ...")
            
            response = self.evaluation_client.chat.completions.create(
                model=self.evaluation_model,
                messages=[{"role": "user", "content": evaluation_prompt}],
                temperature=0.1,
                max_tokens=400,
                timeout=45
            )
            
            if response and response.choices:
                result_text = response.choices[0].message.content
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞
                try:
                    json_match = re.search(r'\{.*\}', result_text, re.DOTALL)
                    if json_match:
                        result_data = json.loads(json_match.group())
                        score = float(result_data.get('score', 3.0))
                        feedback = result_data.get('feedback', '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞')
                        need_follow_up = bool(result_data.get('need_follow_up', True))
                        return max(1.0, min(5.0, score)), feedback, need_follow_up
                except json.JSONDecodeError:
                    pass
            
            # Fallback - —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            return self.simple_evaluation(candidate_answer), "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ü–µ–Ω–∫–∞", len(candidate_answer) < 100
            
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏: {e}")
            return self.simple_evaluation(candidate_answer), "–û—à–∏–±–∫–∞ –æ—Ü–µ–Ω–∫–∏", len(candidate_answer) < 100

    def simple_evaluation(self, candidate_answer: str) -> float:
        """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç–≤—Ä–∏—Å—Ç–∏–∫"""
        length = len(candidate_answer)
        if length < 30:
            return 2.0
        elif length < 100:
            return 3.0
        elif length < 200:
            return 4.0
        else:
            return 4.5

    def generate_follow_up_question(self, question: str, answer: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–∞"""
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
        
        –ü–†–ï–î–´–î–£–©–ò–ô –í–û–ü–†–û–°: {question}
        –û–¢–í–ï–¢ –ö–ê–ù–î–ò–î–ê–¢–ê: {answer}
        
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π:
        1. –£–≥–ª—É–±–ª—è–µ—Ç—Å—è –≤ –¥–µ—Ç–∞–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
        2. –ü—Ä–æ—Å–∏—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã
        3. –ü–æ–º–æ–≥–∞–µ—Ç –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        4. –°–≤—è–∑–∞–Ω —Å –ø–æ–∑–∏—Ü–∏–µ–π –≤ –í–¢–ë
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.generation_model,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=100,
                timeout=30
            )
            
            if response and response.choices:
                question = response.choices[0].message.content.strip()
                return question
            else:
                return "–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "–ú–æ–∂–µ—Ç–µ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± —ç—Ç–æ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ?"

    def generate_question_based_on_introduction(self, introduction: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å–∫–∞–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ —Å–µ–±–µ"""
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å–∫–∞–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ —Å–µ–±–µ, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è.
        
        –†–ê–°–°–ö–ê–ó –ö–ê–ù–î–ò–î–ê–¢–ê: {introduction}
        
        –î–ê–ù–ù–´–ï –ò–ó –†–ï–ó–Æ–ú–ï:
        - –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã: {self.resume_data.get('experience', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
        - –î–æ–ª–∂–Ω–æ—Å—Ç—å: {self.resume_data.get('position', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
        - –ù–∞–≤—ã–∫–∏: {', '.join(self.resume_data.get('skills', []))}
        
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π:
        1. –°–≤—è–∑–∞–Ω —Å –æ–ø—ã—Ç–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        2. –ö–∞—Å–∞–µ—Ç—Å—è –µ–≥–æ –º–æ—Ç–∏–≤–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –í–¢–ë
        3. –ò—Å—Å–ª–µ–¥—É–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏
        4. –Ø–≤–ª—è–µ—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –µ–≥–æ —Ä–∞—Å—Å–∫–∞–∑–∞
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.generation_model,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=150,
                timeout=30
            )
            
            if response and response.choices:
                question = response.choices[0].message.content.strip()
                return question
            else:
                return "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ –∏ –∫–ª—é—á–µ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö?"
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–º –æ–ø—ã—Ç–µ –∏ –∫–ª—é—á–µ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö?"

    def generate_next_question_based_on_history(self, conversation_history: List[Dict]) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        history_text = ""
        for i, msg in enumerate(conversation_history[-6:]):  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —Å–æ–æ–±—â–µ–Ω–∏–π
            role = "–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä" if msg['role'] == 'interviewer' else "–ö–∞–Ω–¥–∏–¥–∞—Ç"
            history_text += f"{role}: {msg['content']}\n"
        
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏, —Å–≥–µ–Ω–µ—Ä–∏—Ä–∏—É–π —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å.
        
        –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:
        {history_text}
        
        –î–ê–ù–ù–´–ï –ö–ê–ù–î–ò–î–ê–¢–ê:
        - –û–ø—ã—Ç: {self.resume_data.get('experience', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
        - –ü–æ–∑–∏—Ü–∏—è: {self.resume_data.get('position', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}
        - –ù–∞–≤—ã–∫–∏: {', '.join(self.resume_data.get('skills', []))}
        
        –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä—ã–π:
        1. –Ø–≤–ª—è–µ—Ç—Å—è –ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ–º –±–µ—Å–µ–¥—ã
        2. –ò—Å—Å–ª–µ–¥—É–µ—Ç –Ω–æ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        3. –°–≤—è–∑–∞–Ω —Å —Ä–∞–±–æ—Ç–æ–π –≤ –í–¢–ë
        4. –£—á–∏—Ç—ã–≤–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—Ç–≤–µ—Ç—ã –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
        
        –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.generation_model,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.7,
                max_tokens=150,
                timeout=30
            )
            
            if response and response.choices:
                question = response.choices[0].message.content.strip()
                return question
            else:
                return "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á?"
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–æ–ø—Ä–æ—Å–∞: {e}")
            return "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á?"

    def text_to_speech(self, text: str, language: str = 'ru'):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Ä–µ—á—å"""
        try:
            tts = gTTS(text=text, lang=language, slow=False)
            audio_bytes = BytesIO()
            tts.write_to_fp(audio_bytes)
            audio_bytes.seek(0)
            
            pygame.mixer.music.load(audio_bytes)
            pygame.mixer.music.play()
            
            while pygame.mixer.music.get_busy():
                pygame.time.wait(100)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")

    def get_ideal_answer(self, question: str) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM"""
        prompt = f"""
        –ö–∞–∫ –æ–ø—ã—Ç–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –¥–∞–π—Ç–µ –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è –≤ –í–¢–ë.
        
        –í–æ–ø—Ä–æ—Å: {question}
        
        –£—á–∏—Ç—ã–≤–∞–π—Ç–µ —á—Ç–æ –∫–∞–Ω–¥–∏–¥–∞—Ç:
        - {self.resume_data.get('experience', '–ò–º–µ–µ—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')}
        - –ü—Ä–µ—Ç–µ–Ω–¥—É–µ—Ç –Ω–∞ –ø–æ–∑–∏—Ü–∏—é: {self.resume_data.get('position', '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞')}
        - –ù–∞–≤—ã–∫–∏: {', '.join(self.resume_data.get('skills', []))}
        
        –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º, —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã.
        –û–±—ä–µ–º: 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
        """
        
        try:
            response = self.client.chat.completions.create(
                model=self.generation_model,
                messages=[{"role": "user", "content": prompt}],
                temperature=0.3,
                max_tokens=150,
                timeout=30
            )
            
            if response and response.choices:
                return response.choices[0].message.content.strip()
            else:
                return "–ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"
                
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return "–ò–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω"

    def analyze_candidate_fit(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –ø–æ–∑–∏—Ü–∏–∏"""
        if not self.candidate_answers:
            return {"score": 0, "recommendation": "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö"}
        
        total_score = sum(self.scores)
        avg_score = total_score / len(self.scores)
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤
        total_duration = sum(ans.get('duration_seconds', 0) for ans in self.candidate_answers)
        avg_duration = total_duration / len(self.candidate_answers)
        
        # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –≤ –æ—Ç–≤–µ—Ç–∞—Ö
        all_answers = " ".join([ans['answer'] for ans in self.candidate_answers])
        keywords = ['–æ–ø—ã—Ç', '–ø—Ä–æ–µ–∫—Ç', '—Ä–µ—à–∏–ª', '–Ω–∞—Å—Ç—Ä–æ–∏–ª', '–∫–æ–º–∞–Ω–¥–∞', '—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏', '—Ä–∞–∑–≤–∏—Ç–∏–µ', '–í–¢–ë', '–±–∞–Ω–∫']
        keyword_count = sum(1 for word in keywords if word.lower() in all_answers.lower())
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if avg_score >= 4.2 and avg_duration > 30 and keyword_count >= 5:
            recommendation = "–°–∏–ª—å–Ω—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç, —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω –∫ –Ω–∞–π–º—É"
            hiring_status = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω"
        elif avg_score >= 3.5:
            recommendation = "–ü–æ–¥—Ö–æ–¥—è—â–∏–π –∫–∞–Ω–¥–∏–¥–∞—Ç, —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"
            hiring_status = "–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏"
        else:
            recommendation = "–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –ø–æ–∑–∏—Ü–∏–∏"
            hiring_status = "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω"
        
        return {
            "average_score": round(avg_score, 1),
            "total_duration_seconds": round(total_duration, 1),
            "average_duration_seconds": round(avg_duration, 1),
            "keyword_match_count": keyword_count,
            "recommendation": recommendation,
            "hiring_status": hiring_status,
            "interview_date": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }

    def conduct_interview(self):
        """–ü—Ä–æ–≤–æ–¥–∏—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ"""
        print("=" * 60)
        print("üéôÔ∏è  –ê–î–ê–ü–¢–ò–í–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–õ–û–°–û–í–û–ì–û –°–û–ë–ï–°–ï–î–û–í–ê–ù–ò–Ø –í–¢–ë")
        print("=" * 60)
        
        # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        greeting = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –≤ –í–¢–ë! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä–∏—è, —è –≤–∞—à–∞ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –ø–æ–º–æ—â–Ω–∏—Ü–∞. –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º —Å –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ: –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ, –Ω–∞–≤—ã–∫–∞—Ö –∏ –ø–æ—á–µ–º—É –≤—ã –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω—ã –≤ —Ä–∞–±–æ—Ç–µ –≤ –í–¢–ë."
        print(f"üëã {greeting}")
        self.text_to_speech(greeting)
        
        # –°–ª—É—à–∞–µ–º —Ä–∞—Å—Å–∫–∞–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ —Å–µ–±–µ
        print("\nüé§ –°–ª—É—à–∞–µ–º —Ä–∞—Å—Å–∫–∞–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –æ —Å–µ–±–µ...")
        introduction, intro_duration = self.listen_to_speech_with_silence_detection(timeout=180)
        self.candidate_introduction = introduction
        print(f"üí¨ –ö–∞–Ω–¥–∏–¥–∞—Ç: {introduction}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history.append({
            'role': 'interviewer',
            'content': greeting,
            'timestamp': time.time()
        })
        self.conversation_history.append({
            'role': 'candidate', 
            'content': introduction,
            'timestamp': time.time()
        })
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å–∫–∞–∑–∞
        print("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å–∫–∞–∑–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞...")
        first_question = self.generate_question_based_on_introduction(introduction)
        ideal_answer = self.get_ideal_answer(first_question)
        
        print(f"\nüë©‚Äçüíº HR: {first_question}")
        self.text_to_speech(first_question)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        question_count = 0
        max_questions = 8
        
        while question_count < max_questions:
            # –°–ª—É—à–∞–µ–º –æ—Ç–≤–µ—Ç
            candidate_answer, answer_duration = self.listen_to_speech_with_silence_detection(timeout=180)
            print(f"üí¨ –û—Ç–≤–µ—Ç: {candidate_answer}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
            self.candidate_answers.append({
                'question': first_question,
                'answer': candidate_answer,
                'duration_seconds': round(answer_duration, 1),
                'ideal_answer': ideal_answer,
                'question_type': '–æ—Å–Ω–æ–≤–Ω–æ–π'
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation_history.append({
                'role': 'interviewer',
                'content': first_question,
                'timestamp': time.time()
            })
            self.conversation_history.append({
                'role': 'candidate', 
                'content': candidate_answer,
                'timestamp': time.time()
            })
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ
            score, feedback, need_follow_up = self.evaluate_answer_and_decide(
                first_question, candidate_answer, ideal_answer
            )
            
            self.scores.append(score)
            
            print(f"‚≠ê –û—Ü–µ–Ω–∫–∞: {score}/5")
            print(f"üìù –§–∏–¥–±–µ–∫: {feedback}")
            print(f"üîç –ù—É–∂–µ–Ω –¥–æ–ø. –≤–æ–ø—Ä–æ—Å: {'–î–∞' if need_follow_up else '–ù–µ—Ç'}")
            
            # –ï—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            if need_follow_up and question_count < max_questions - 1:
                follow_up_question = self.generate_follow_up_question(first_question, candidate_answer)
                print(f"\nüîç –£—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {follow_up_question}")
                self.text_to_speech(follow_up_question)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–∏
                first_question = follow_up_question
                ideal_answer = self.get_ideal_answer(follow_up_question)
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏
                if question_count < max_questions - 1:
                    next_question = self.generate_next_question_based_on_history(self.conversation_history)
                    print(f"\nüìù –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: {next_question}")
                    self.text_to_speech(next_question)
                    
                    first_question = next_question
                    ideal_answer = self.get_ideal_answer(next_question)
            
            question_count += 1
            
            # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
            time.sleep(1)
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è
        closing = "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –ù–∞ —ç—Ç–æ–º —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."
        print(f"\nüëã {closing}")
        self.text_to_speech(closing)
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = self.analyze_candidate_fit()
        print(f"\n{'='*60}")
        print("üìä –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó –ö–ê–ù–î–ò–î–ê–¢–ê")
        print("=" * 60)
        print(f"üéØ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {analysis['average_score']}/5")
        print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–æ–≤: {analysis['total_duration_seconds']} —Å–µ–∫")
        print(f"üìà –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º: {analysis['keyword_match_count']}")
        print(f"üíº –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {analysis['recommendation']}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = {
            'candidate_info': self.resume_data,
            'interview_results': analysis,
            'answers': self.candidate_answers,
            'scores': self.scores,
            'conversation_history': self.conversation_history
        }
        
        with open(f"interview_results_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json", 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print("üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª")

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—è"""
        try:
            self.conduct_interview()
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        finally:
            self.stop_listening()

# –ü—Ä–∏–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—é–º–µ
resume_data = {
    "gender": "–ú—É–∂—Å–∫–æ–π",
    "age": "35 –ª–µ—Ç",
    "experience": "10 –ª–µ—Ç –≤ IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
    "position": "–í–µ–¥—É—â–∏–π –∏–Ω–∂–µ–Ω–µ—Ä IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã",
    "skills": ["Windows Server", "Active Directory", "VMware", "–°–µ—Ç–µ–≤–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ", "Linux", "Docker"]
}

if __name__ == "__main__":
    system = AdvancedVoiceInterviewSystem(resume_data)
    system.run()